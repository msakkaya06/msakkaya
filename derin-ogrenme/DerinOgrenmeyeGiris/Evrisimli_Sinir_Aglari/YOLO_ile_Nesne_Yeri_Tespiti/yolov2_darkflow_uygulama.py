# -*- coding: utf-8 -*-
"""YOLOv2_Darkflow_Uygulama.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nTZ0BWsi0OBb6NCuuPDlNcEkZwlH38Un

# NESNE YERİ TESPİTİ: YOLO 


---

**Kaynak:[ YOLO: Real-Time Object Detection](https://pjreddie.com/darknet/yolo/)**


---


[<img align="right" width="100" height="100" src="http://www.i2symbol.com/images/symbols/style-letters/circled_latin_capital_letter_a_u24B6_icon_128x128.png">](https://www.ayyucekizrak.com/)

## Kaynak Dosyalarını `github` üzerinden alma işlemleri
"""

!git clone https://github.com/thtrieu/darkflow

"""**Dosya Konumlama Adımları...**"""

!ls

import os
os.chdir("darkflow")

!ls

!ls cfg

"""### Kütüphane Kurulumu"""

!pip3 install Cython h5py

!python3 setup.py build_ext --inplace

!pip3 install -e .

!mkdir bin

!wget https://pjreddie.com/media/files/yolo.weights -P bin/

!ls bin/

"""## **UYGULAMA**"""

!apt-get -qq install -y libsm6 libxext6 && pip install -q -U opencv-python

import cv2
from darkflow.net.build import TFNet
import matplotlib.pyplot as plt

from keras.preprocessing import image

# %config InlineBackend.figure_format = 'svg'

"""### Modelin Tanımlanması ve Çalıştırılması"""

options = {
    'model': 'cfg/yolo.cfg',
    'load': 'bin/yolo.weights',
    'threshold': 0.3,
    'gpu': 0
}

tfnet = TFNet(options)

from google.colab import drive
drive.mount('/content/drive/')

os.chdir("../")

!mkdir -p drive
!google-drive-ocamlfuse drive
!ls

os.chdir("darkflow")

!ls '../drive/My Drive/Udemy_DerinOgrenmeyeGiris/Evrisimli_Sinir_Aglari/YOLO_ile_Nesne_Yeri_Tespiti/images'

"""**Görüntüyü oku ve uygun boyutlara getir!**"""

test_image = '../drive/My Drive/Udemy_DerinOgrenmeyeGiris/Evrisimli_Sinir_Aglari/YOLO_ile_Nesne_Yeri_Tespiti/images/insan.jpg'
test_image2 = '../drive/My Drive/Udemy_DerinOgrenmeyeGiris/Evrisimli_Sinir_Aglari/YOLO_ile_Nesne_Yeri_Tespiti/images/istiklal.jpg'

img = cv2.imread(test_image, cv2.IMREAD_COLOR)
img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)


img.shape

"""**Seçilen görüntüyü ekrana yazdır!**"""

predicted_image = image.load_img(test_image)

plt.axis('off')
plt.imshow(predicted_image)
plt.show()

"""## Görüntüyü kestirmek için `YOLO` Kullan!"""

result = tfnet.return_predict(img)
result

"""**Etiket ve kutu belirleme işlemleri**"""

for r in result:
  tl = (r['topleft']['x'], r['topleft']['y'])
  br = (r['bottomright']['x'], r['bottomright']['y'])
  label = r['label']


  # görüntü üzerine kutuyu ekleme
  img = cv2.rectangle(img, tl, br, (0, 255, 0), 7)
  img = cv2.putText(img, label, tl, cv2.FONT_HERSHEY_COMPLEX, 1, (0, 0, 0), 2)

# Görüntüyü ekrana yazdırma
plt.imshow(img)
plt.show()